// tg-kanban-squish-column,
// tg-kanban-sortable,
div.kanban-table([class.zoom-0]="zoomLevel == 0")
    div.kanban-table-header
        div.kanban-table-inner
            // tg-class-permission="{'readonly': '!modify_task'}")
            h2.task-colum-name(*ngFor="let s of usStatusList",
                               [style.border-top-color]="s.color",
                               [title]="s.name",
                               [class.vfold]='folds[s.id]')
                span {{ s.name }}
                div.options
                    a.option(
                        (click)='foldStatus(s)',
                        [title]="'KANBAN.TITLE_ACTION_FOLD' | translate",
                        [class.hidden]='folds[s.id]'
                    )
                        tg-svg(svg-icon="icon-fold-column")
                    a.option.hunfold(
                        (click)='foldStatus(s)',
                        [title]="'KANBAN.TITLE_ACTION_UNFOLD' | translate",
                        [class.hidden]='!folds[s.id]'
                    )
                        tg-svg(svg-icon="icon-unfold-column")
                    // tg-check-permission="add_us"
                    a.option(
                        [title]="'KANBAN.TITLE_ACTION_ADD_US' | translate",
                        (click)="addNewUs('standard', s.id)",
                        *ngIf="!s.is_archived"
                    )
                        tg-svg.add-action(svg-icon="icon-add")

                    //tg-check-permission="add_us"
                    a.option(
                        [title]="'KANBAN.TITLE_ACTION_ADD_BULK' | translate",
                        (click)="addNewUs('bulk', s.id)",
                        *ngIf="!s.is_archived"
                    )
                        tg-svg.bulk-action(svg-icon="icon-bulk")

                    // tg-kanban-archived-status-header="s")
                    a.option.e2e-archived([title]="title",
                                          [ngClass]="class",
                                          *ngIf="s.is_archived")
                        tg-svg.bulk-action(svg-icon="{{class}}")

    // div.kanban-table-body
    //     div.kanban-table-inner
    //         div.kanban-uses-box.task-column(ng-class='{vfold:folds[s.id]}',
    //             ng-repeat="s in ::usStatusList track by s.id",
    //             tg-kanban-wip-limit="s",
    //             tg-kanban-column-height-fixer,
    //             tg-bind-scope
    //         )
    //             .card-placeholder(
    //                 ngIf="showPlaceHolder(s.id)"
    //                 ng-include="'common/components/kanban-placeholder.html'"
    //             )
    //
    //             // tg-card.card.ng-animate-disabled(
    //             //     tg-repeat="us in usByStatus.get(s.id.toString()) track by us.getIn(['model', 'id'])",
    //             //     ng-class="{'kanban-task-maximized': ctrl.isMaximized(s.id), 'kanban-task-minimized': ctrl.isMinimized(s.id)}"
    //             //     tg-class-permission="{'readonly': '!modify_task'}"
    //             //     tg-bind-scope,
    //             //     on-toggle-fold="ctrl.toggleFold(id)"
    //             //     on-click-edit="ctrl.editUs(id)"
    //             //     on-click-assigned-to="ctrl.changeUsAssignedTo(id)"
    //             //     project="project"
    //             //     item="us"
    //             //     zoom="ctrl.zoom"
    //             //     zoom-level="ctrl.zoomLevel"
    //             //     archived="ctrl.isUsInArchivedHiddenStatus(us.get('id'))"
    //             // )
    //
    //             div.kanban-column-intro(ngIf="s.is_archived", tg-kanban-archived-status-intro="s")
